#!/usr/bin/env python
# -*-python-*-

import os.path
import sys
import logging
import pprint

import mapzen.whosonfirst.utils
import mapzen.whosonfirst.concordances

if __name__ == '__main__':

    import optparse
    import ConfigParser

    opt_parser = optparse.OptionParser()
    
    opt_parser.add_option('-s', '--source', dest='source', action='store', default=None, help='Where to read files from')
    opt_parser.add_option('-c', '--config', dest='config', action='store', default=None, help='...')

    opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')
    options, args = opt_parser.parse_args()

    if options.verbose:	
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    if not os.path.exists(options.config):
        logging.error("Missing config file")
        sys.exit()

    cfg = ConfigParser.ConfigParser()
    cfg.read(options.config)

    dsn = mapzen.whosonfirst.concordances.cfg2dsn(cfg, 'whosonfirst')
    idx = mapzen.whosonfirst.concordances.index(dsn)

    source = os.path.abspath(options.source)
    crawl = mapzen.whosonfirst.utils.crawl(source, inflate=True)

    for record in crawl:

        props = record['properties']
        wofid = props['wof:id']
 
        concordances = props.get('wof:concordances', None)

        for k, v in concordances.items():
            idx.import_concordance(wofid, v, k)
            
    sys.exit()
