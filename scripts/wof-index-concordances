#!/usr/bin/env python
# -*-python-*-

import os.path
import sys
import logging
import pprint
import types

import mapzen.whosonfirst.utils
import mapzen.whosonfirst.concordances

if __name__ == '__main__':

    import optparse
    import ConfigParser

    opt_parser = optparse.OptionParser("""usage: wof-index-concordance -c /path/to/config /path/to/one/source /path/to/another/source""")
    
    opt_parser.add_option('-c', '--config', dest='config', action='store', default=None, help='...')

    opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')
    options, args = opt_parser.parse_args()

    if options.verbose:	
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    if not os.path.exists(options.config):
        logging.error("Missing config file")
        sys.exit()

    cfg = ConfigParser.ConfigParser()
    cfg.read(options.config)

    dsn = mapzen.whosonfirst.concordances.cfg2dsn(cfg, 'concordances')
    idx = mapzen.whosonfirst.concordances.index(dsn)

    for source in args:

        logging.debug("import %s" % source)

        source = os.path.abspath(source)
        crawl = mapzen.whosonfirst.utils.crawl(source, inflate=True)

        for record in crawl:

            props = record['properties']
            wofid = props['wof:id']

            idx.purge_concordances(wofid)

            concordances = props.get('wof:concordances', {})

            if props.get('wof:geomhash', False):
                concordances['wof:geomhash'] = props.get('wof:geomhash')

            if len(concordances.keys()) == 0:
                logging.warning("%s has no concordances: %s" % (wofid, str(concordances)))
                continue

            logging.debug(concordances)
            idx.import_concordances(wofid, concordances, purge=True)

    sys.exit()
