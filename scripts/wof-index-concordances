#!/usr/bin/env python
# -*-python-*-

import os.path
import sys
import logging
import pprint
import types
import random

import mapzen.whosonfirst.utils
import mapzen.whosonfirst.concordances

if __name__ == '__main__':

    import optparse
    import ConfigParser

    opt_parser = optparse.OptionParser("""usage: wof-index-concordance -c /path/to/config /path/to/one/source /path/to/another/source""")
    
    opt_parser.add_option('-c', '--config', dest='config', action='store', default=None, help='...')
    opt_parser.add_option('-m', '--maxconns', dest='maxconns', action='store', default=50, help='...')

    opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')
    options, args = opt_parser.parse_args()

    if options.verbose:	
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    if not os.path.exists(options.config):
        logging.error("Missing config file")
        sys.exit()

    cfg = ConfigParser.ConfigParser()
    cfg.read(options.config)

    dsn = mapzen.whosonfirst.concordances.cfg2dsn(cfg, 'concordances')

    max_conns = int(options.maxconns)
    conns = []

    def get_idx():
        
        if len(conns) == max_conns:
            random.shuffle(conns)
            return conns[0]

        idx = mapzen.whosonfirst.concordances.index(dsn)
        conns.append(idx)

        return idx

    for source in args:

        source = os.path.abspath(source)
        logging.debug("import %s" % source)

        def callback(feature):
    
            props = feature['properties']
            wofid = props['wof:id']
            
            concordances = props.get('wof:concordances', {})

            if type(concordances) != types.DictType:
                logging.warning("%s has malformed concordances: %s" % (wofid, str(concordances)))
                return

            i = get_idx()

            if len(concordances.keys()) == 0:
                logging.debug("%s has no concordances, purging" % wofid)
                i.purge_concordances(wofid)
                return

            i.import_concordances(wofid, concordances, purge=True)

        mapzen.whosonfirst.utils.crawl_with_callback(source, callback, inflate=True, multiprocessing=True)

    sys.exit()
